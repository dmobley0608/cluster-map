<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link  href="/static/css/styles.css" rel="stylesheet">
    
    <!-- MAPBOX -->
    <link href="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css" rel="stylesheet">
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js"></script>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">

    <title>Document</title>
    
</head>
<body>
    <div id="map"></div>
    <!-- Upload Form -->
    <% if(cases.length < 1){%>
    <div id="uploader" class="p-5">
        <form action="/"method="POST" enctype="multipart/form-data">
            <h5>Please select an Excel File to continue</h5>
            <input type="file" name="cases"/>
            <input type="submit"/>
        </form>
    </div>
    <%}%>
    <!-- Case Stats -->
    <div id="stats">
        <h2>STATS</h2>
        
        <div class="accordion accordion-flush " id="accordionFlushExample">
            <div class="accordion-item">
              <h2 class="accordion-header" id="flush-headingOne">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseOne" aria-expanded="false" aria-controls="flush-collapseOne">
                    CASES - <%= cases.length %>
                </button>
              </h2>
              <div id="flush-collapseOne" class="accordion-collapse collapse" aria-labelledby="flush-headingOne" data-bs-parent="#accordionFlushExample">
                <div class="accordion-body bg-dark text-light">
                    <% Object.keys(caseTypes).sort().forEach((_case) =>{ %>
                        <h6><%= _case%>: <%= caseTypes[_case]%></h6>
                    <% }) %>
                  </div>
              </div>
            </div>
       
        <!-- Officer Stats -->
        <hr>
        <h3>Officer Call Count</h3>
        <% Object.keys(officers).forEach((officer) =>{ %>
            <h6><%= officer%>: <%=officers[officer]%></h6>
        <% }) %>  
        <!-- Repeat Call Stats -->
        <hr>
        <h3>Repeat Cases</h3>
        <% Object.keys(repeatCases).forEach((call) =>{ %>   
            <hr>         
            <h6><%= call%>: <br>Total Calls <%= repeatCases[call].count %> <br>Officer: <%= repeatCases[call].properties.officer %></h6>
            <hr>

        <% }) %> 

    </div>
    <script>
          const cases = { features:<%- JSON.stringify(cases) %>};
    mapboxgl.accessToken = 'pk.eyJ1IjoiZG1vYmxleTA2MDgiLCJhIjoiY2xma3p0OXdjMDA5MDN0cnJhaThoZDBxcSJ9.g90PLYWQ29yAz2yFbQiATQ';
    const map = new mapboxgl.Map({
    container: 'map',
    // Choose from Mapbox's core styles, or make your own style with Mapbox Studio
    style: 'mapbox://styles/mapbox/streets-v12',
    center: [-83.8049, 34.3078],
    zoom: 9
    });
     
    map.on('load', () => {
    // Add a new source from our GeoJSON data and
    // set the 'cluster' option to true. GL-JS will
    // add the point_count property to your source data.
    map.addSource('cases', {
    type: 'geojson',
   
    data: cases,
    cluster: true,
    clusterMaxZoom: 14, // Max zoom to cluster points on
    clusterRadius: 50 // Radius of each cluster when clustering points (defaults to 50)
    });
     
    map.addLayer({
    id: 'clusters',
    type: 'circle',
    source: 'cases',
    filter: ['has', 'point_count'],
    paint: {
    // Use step expressions (https://docs.mapbox.com/mapbox-gl-js/style-spec/#expressions-step)
    // with three steps to implement three types of circles:
    //   * Blue, 20px circles when point count is less than 100
    //   * Yellow, 30px circles when point count is between 100 and 750
    //   * Pink, 40px circles when point count is greater than or equal to 750
    'circle-color': [
    'step',
    ['get', 'point_count'],
    '#51bbd6',
    100,
    '#f1f075',
    750,
    '#f28cb1'
    ],
    'circle-radius': [
    'step',
    ['get', 'point_count'],
    20,
    100,
    30,
    750,
    40
    ]
    }
    });
     
    map.addLayer({
    id: 'cluster-count',
    type: 'symbol',
    source: 'cases',
    filter: ['has', 'point_count'],
    layout: {
    'text-field': ['get', 'point_count_abbreviated'],
    'text-font': ['DIN Offc Pro Medium', 'Arial Unicode MS Bold'],
    'text-size': 12
    }
    });
     
    map.addLayer({
    id: 'unclustered-point',
    type: 'circle',
    source: 'cases',
    filter: ['!', ['has', 'point_count']],
    paint: {
    'circle-color': '#11b4da',
    'circle-radius': 4,
    'circle-stroke-width': 1,
    'circle-stroke-color': '#fff'
    }
    });
     
    // inspect a cluster on click
    map.on('click', 'clusters', (e) => {
    const features = map.queryRenderedFeatures(e.point, {
    layers: ['clusters']
    });
    const clusterId = features[0].properties.cluster_id;
    map.getSource('cases').getClusterExpansionZoom(
    clusterId,
    (err, zoom) => {
    if (err) return;
     
    map.easeTo({
    center: features[0].geometry.coordinates,
    zoom: zoom
    });
    }
    );
    });
     
    // When a click event occurs on a feature in
    // the unclustered-point layer, open a popup at
    // the location of the feature, with
    // description HTML from its properties.
    map.on('click', 'unclustered-point', (e) => {
    const coordinates = e.features[0].geometry.coordinates.slice();
    const date = new Date(e.features[0].properties.date);
    console.log(e.features[0].properties)
    const address = e.features[0].properties.address;
    const officer = e.features[0].properties.officer
     const problem =e.features[0].properties.problem
    // Ensure that if the map is zoomed out such that
    // multiple copies of the feature are visible, the
    // popup appears over the copy being pointed to.
    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
    coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
    }
     
    new mapboxgl.Popup()
    .setLngLat(coordinates)
    .setHTML(
    `Location: ${address}<br>Problem:${problem}<br>Officer:${officer}`
    )
    .addTo(map);
    });
     
    map.on('mouseenter', 'clusters', () => {
    map.getCanvas().style.cursor = 'pointer';
    });
    map.on('mouseleave', 'clusters', () => {
    map.getCanvas().style.cursor = '';
    });
    });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
</body>
</html>